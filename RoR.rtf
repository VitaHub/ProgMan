	Using the request/response cycle as a guide, this has been our workflow when making a Rails app.

1) Generate a new Rails app.
2) Generate a controller and add an action.
3) Create a route that maps a URL to the controller action.
4) Create a view with HTML and CSS.
5) Run the local web server and preview the app in the browser.


1.
Let's get started by making a Rails app for a personal website. We'll explain each step in the next exercise.

$ rails new MySite

2.
Then run

$ bundle install

3.
Finally type

$ rails server

4.
View the Rails app in the browser by visiting http://localhost:8000.

Then click Next to find out what these commands do.

Nice work! In three commands, you built a working Rails app that displays the Rails default page. How does it work?

	The rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use to build the app. In the Code Editor, click on the folder icon  to see these files and folders. We'll see what these files and folders are for in the next exercises. The rails new command is the starting point of every Rails project.
	The bundle install command installed all the software packages needed by the new Rails app. These software packages are called gems and they are listed in the file Gemfile.
	The rails server command started the Rails development server so that we could preview the app in the browser by visiting http://localhost:8000. This development server is called WEBrick.

5.
Looking at the request/response cycle, we need three parts to build a Rails app: a controller, a route, and a view. Let's start here by creating a controller.

$ rails generate controller Pages

6.
After rails generate finishes running, in the Code Editor, open app/controllers/pages_controller.rb. Within the class PagesController, add a method home:

class PagesController < ApplicationController 

  def home
  end

end

7.
Now that we have a controller, let's move on to the second part of the request/response cycle and create a route.

Open config/routes.rb and underneath line 1, type:

get 'welcome' => 'pages#home'

root 'pages#home'

This route tells Rails to map requests for the url / to the Pages controller's home action.

8.
Now that we have a controller and a route, let's move on to the third part of the request/response cycle and create a view.

Open app/views/pages/home.html.erb, and type in the following HTML. Fill in your own name.

<div class="main">
  <div class="container">
    <h1>Hello my name is __</h1>
    <p>I make Rails apps.</p>
  </div>
</div>

We've provided CSS in the file app/assets/stylesheets/pages.css.scss.

9.
View your app by visiting http://localhost:8000/welcome in the browser.



Here's how a database fits into the request-response cycle. Check out the diagram in the browser.

1) When you type http://localhost:8000/welcome, the browser makes a request for the URL /welcome.
2) The request hits the Rails router.
3) The router maps the URL to a controller action to handle the request.
4) The controller action recieves the request, and asks the model to fetch data from the database.
5) The model returns data to the controller action.
6) The controller action passes the data on to the view.
7) The view renders the page as HTML.
8) The controller sends the HTML back to the browser.

Looking at the request/response cycle, we need four parts to build a Rails app - a model, a route, a controller, and a view.

1.
In the terminal, generate a new model named Message

rails generate model Message

2.
Open the migration file in db/migrate/ for the messages table. The name of the migration file starts with the timestamp of when it was created. Inside the change method, add this line as line 4:

t.text :content

3.
Then in the terminal, run

rake db:migrate

4.
Finally, run

rake db:seed

What did we just do?

	The rails generate model command created a new model named Message. In doing so, Rails created two files:

- a model file in app/models/message.rb. The model represents a table in the database.
- a migration file in db/migrate/. Migrations are a way to update the database.
	Open the migration file in db/migrate/. The migration file contains a few things:

- The change method tells Rails what change to make to the database. Here it uses the create_table method to create a new table in the database for storing messages.
- Inside create_table, we added t.text :content. This will create a text column called content in the messages tables.
- The final line t.timestamps is a Rails command that creates two more columns in the messages table called created_at and updated_at. These columns are automatically set when a message is created and updated.
	The rake db:migrate command updates the database with the new messages data model.

	Finally the rake db:seed command seeds the database with sample data from db/seeds.rb.

5.
Now that we have a model, let's move on to the second and third parts of the request/response cycle and create a controller and a route.

Generate a controller named Messages.

6.
In the routes file, create a route that maps the URL /messages to the Messages controller's index action.

7.
Then in the Messages controller (app/controllers/messages_controller.rb), add an index action:

def index 
  @messages = Message.all 
end

8.
Open app/views/messages/index.html.erb. Under line 11, type the contents as you see here:

<% @messages.each do |message| %> 
<div class="message"> 
  <p class="content"><%= message.content %></p> 
  <p class="time"><%= message.created_at %></p> 
</div> 
<% end %>

The file index.html.erb is a web template. Web templates are HTML files that contain variables and control flow statements. Rather than write the same HTML over and over again for each message, we can use web templates to loop through and display data from the database.

In this case:

<% @messages.each do |message| %> iterates through each message in @messages array. We created @messages in the Messages controller's index action.
For each message, we use <%= message.content %> and <%= message.created_at %> to display its content and the time when it was created.
The default web templating language in Rails is embedded Ruby, or ERB.

9.
So far we've been loading messages from the database and displaying them in the view. How can we create new messages and save them to the database? Looking at the seven standard Rails actions, we need to use the new and create actions. Let's set them up now.

 




In the routes file, create a route that maps requests to messages/new to the Message controller's new action.
10.
Then in the Messages controller below the index action, add the new action:

def new 
  @message = Message.new 
end

11.
In the routes file, add this route to map requests to the Message controller's create action:

post 'messages' => 'messages#create'

12.
Then in the Messages controller below the new action, add a private method named message_params. Type:

private 
  def message_params 
    params.require(:message).permit(:content) 
  end

13.
Between the new action and the private method, add the create action. Type:

def create 
  @message = Message.new(message_params) 
  if @message.save 
    redirect_to '/messages' 
  else 
    render 'new' 
  end 
end

14.
Next, in app/views/messages/new.html.erb under line 11, type in the contents as you see here:

<%= form_for(@message) do |f| %>  
  <div class="field"> 
    <%= f.label :message %><br> 
    <%= f.text_area :content %> 
  </div> 
  <div class="actions"> 
    <%= f.submit "Create" %> 
  </div> 
<% end %>

15.
Finally in app/views/messages/index.html.erb below the <% @messages.each do |message| %>...<% end %> block, add

<%= link_to 'New Message', "messages/new" %>

Nicely done! The app now takes in messages through a form and saves them into the database. How does this work? Let's use the request/response cycle as a guide to trace how a user's request flows through the app.

When you visit http://localhost:8000/messages/new to create a new message, it triggers the first turn of the request/response cycle:

1) The browser makes a HTTP GET request for the URL /messages/new.
2) The Rails router maps this URL to the Messages controller's new action. The new action creates a new Message object @message and passes it on to the view in app/views/messages/new.html.erb.
3) In the view, form_for creates a form with the fields of the @message object.
Then when you fill out the form and press Create, it triggers the second turn of the request/response cycle:

1) The browser sends the data to the Rails app via an HTTP POST request to the URL /messages.
2)This time, the Rails router maps this URL to the create action.
3) The create action uses the message_params method to safely collect data from the form and update the database.
Here we used link_to to create a link to /messages/new. Instead of hardcoding <a> elements, we can use link_to to generate links:

- the first parameter is the link text
- the second parameter is the URL

What can we generalize so far?

- A model represents a table in the database.
- A migration is a way to update the database with a new table, or changes to an existing table.
- Rails provides seven standard controller actions for doing common things such as display and create data
- Data can be displayed in the view using ERB web templating.
- Data can be saved into the database using a web form.

Confirm that your email saved to the database. The Rails console is a useful tool to interact with Rails apps. We'll use it here to query the database.

In the terminal, open a new tab by clicking the 
Switch into your app's folder by typing cd innovation-cloud
Start the Rails console by running
$ rails console
When you enter the Rails console, retrieve all emails in the database by running the query
> Signup.all
This query returns all emails in the database as an array. Your email should show up in the console output. 

To exit the Rails console at any point, type Ctrl+D.

	Lesson 3

We built a Rails app that stores data using a single model.
What if we want to build an app with more than one kind of data, like Team and Athlete? Both Team and Athlete would have have different columns, and it would get messy to represent both in one model. Instead, we can represent them using two models.
Let's see how this works by building a Rails app for a travel app.

1.
Create a new app named TravelApp.

2.
Install the gems.

3.
Run the local server and visit http://localhost:8000.

Great! Looking at the request/response cycle, we need four parts to build the travel app: models, controllers, routes, and views.
Let's begin by creating the models.

4.
Generate a model named Tag.

5.
Generate another model named Destination.

6.
In app/models/tag.rb add a has_many method, like this:

class Tag < ActiveRecord::Base 
  has_many :destinations 
end

7.
In app/models/destination.rb, add a belongs_to method:

belongs_to :tag

What did we just do?

We created two models named Tag and Destinations.
In the model files, we used the methods has_many and belongs_to define an association between Tag and Destination:

has_many :destinations denotes that a single Tag can have multiple Destinations.
belongs_to :tag denotes that each Destination belongs to a single Tag.
The has_many / belongs_to pair is frequently used to define one-to-many relationships. A few examples are:

a Library has many Books; a Book belongs to a Library
an Album has many Photos; a Photo belongs to an Album
a Store has many Products; a Product belongs to a Store

8.
Now that there's an association between Tag and Destination, let's continue and add columns to the migration files.
Open the migration file in db/migrate/ for the tags table, and add the following columns:

a string column called title
a string column called image
9.
Next in the migration file for the destinations table, add the following columns:

a string column called name
a string column called image
a string column called description
the line t.references :tag

10.
Run the migration to update the database with Tag and Destination.

11.
Open up db/seeds.rb. We've added a few items here to seed the database with tags and destinations. Run rake db:seed to seed the database with the data in db/seeds.rb.

Nice work. What did we just do?

We added two string columns title and image to the tags table
We added three string columns name, image, and description to the destinations table
We also added the line t.references :tag to the destinations table. This adds a foreign key pointing to the tags table.
Finally we ran the migrations to update the database, and seeded the database with the data in db/seeds.rb.

12.
Now that the models are set up, let's move on to the rest of the request/response cycle and create a controller, a route, and a view.

Generate a controller named Tags

13.
In the routes file, add a new route that maps requests to /tags to the Tags controller's index action.

14.
Then in the Tags controller, add the index action to display a list of all tags. To do this, fetch all tags from the database and store them in variable @tags.

15.
In app/views/tags/index.html.erb at line 12, iterate through each tag in the @tags array. Then for each tag, display its title and image.

Well done! The app now displays a list of tags from the database.

16.
Let's add another action to display a specific tag. Looking at the seven standard controller actions, we need to use the show action. Let's set it up now.

First in the routes file, add this route:

get '/tags/:id' => 'tags#show', as: :tag

Here we use as: to name this route "tag".

17.
Then in the Tags controller, add the show action:

def show 
  @tag = Tag.find(params[:id]) 
  @destinations = @tag.destinations 
end

18.
In app/views/tags/show.html.erb inside the <h2> element, display a tag's title.

Then in <div class="cards">...</div>, iterate through each destination in the @destinations array and display its image, name, and description.

19.
Finally in app/views/tag/index.html.erb within the <% @tags.each do |t| %>...<% end %> block, add this link:

<%= link_to "Learn more", tag_path(t) %>

By giving the route in step 1 the name "tag", Rails automatically creates a helper method named tag_path. We use tag_path(t) here to generate the URL to a specific tag's path, for example /tag/1.

Nice job! The app displays all destinations that belong to a tag. How does this work?

When a user visits http://localhost:8000/tags/1, the route get '/tags/:id' => 'tags#show' sends this request to the Tags controller's show action with {id: 1} in params.
The @destinations = @tag.destinations retrieves all the destinations that belong to the tag, and stores them in @destinations. The has_many / belongs_to association lets us query for destinations like this.
The tag and its destinations are sent to the view to be displayed.

20.
Let's add functionality to see a destination.

Generate a controller named Destinations.

21.
Next in the routes file, map requests to/destinations/:id to the Destinations controller's show action. Use as: to name this route "destination".

22.
Then in the Destinations controller, set up the show action. Use params to find a destination by id, and save it in @destination

23.
Then in the view app/views/destinations/show.html.erb, display the destination's image, name, and description.

24.
Finally in app/views/tags/show.html.erb below a destination's description, use link_to to add a link to that destination:

Use "See more" for the link text
By giving the show route a name of "destination", Rails automatically creates a helper method named destination_path. Use destination_path to generate a URL to a specific destination's path.

Great! The app now displays a specific destination.

Let's continue by adding actions to update a destination's name and description. Looking at the seven standard Rails actions, we need to use the edit and update actions to do this. Let's set them up now.

25.
First in the routes file (config/routes.rb), add these routes:

get '/destinations/:id/edit' => 'destinations#edit', as: :edit_destination 
patch '/destinations/:id' => 'destinations#update'

26.
Then in the Destinations controller below the show action, add an edit action:

def edit 
  @destination = Destination.find(params[:id]) 
end

27.
Below the edit action, add a private method named destination_params:

private 
  def destination_params 
    params.require(:destination).permit(:name, :description) 
  end

28.
Between the edit action and the private method, add an update action:

def update 
  @destination = Destination.find(params[:id]) 
  if @destination.update_attributes(destination_params) 
    redirect_to(:action => 'show', :id => @destination.id) 
  else 
    render 'edit' 
  end 
end

29.
In app/views/destinations/edit.html.erb inside <div class="container">...</div>, use form_for to create a form with the fields of the @destination object.

Look back at this exercise for an example of how to use form_for.

30.
Finally in app/views/destinations/show.html.erb, use link_to to create a link to the destination's edit path:

Use "Edit" for the link text
By giving the edit route a name of "edit_destination", Rails automatically creates a helper method named edit_destination_path. Use it to generate a URL to a specific destination's edit path.

Nicely done! You can now update a destination's name and description. How does it work?

When you visit http://localhost:8000/destinations/1/edit to edit a destination, it triggers the first turn of the request/response cycle:

The browser makes a HTTP GET request for the URL /destinations/1/edit.
The Rails router maps this URL to the Destinations controller's edit action. The edit action finds the destination with id 1, stores it in @destination, and passes it on to the view app/views/destinations/edit.html.erb.
In the view, form_for creates a form with the fields of the @destinations object.
Then when you fill out the form and submit it, it triggers the second turn of the request/response cycle:

The browser sends the data to the Rails app via an HTTP POST request to the URL /destinations/update.
This time, the Rails router maps this URL to the update action.
The update uses the destination_params method to safely collect data from the form. It finds the destination in the database, updates its attributes, and redirects to the destination's show page.



	Lesson 4. Associations II

So far we've made an app that stores data using two models. We used the has_many / belongs_to association to model a one-to-many relationship between the data.

But not all data is one-to-many. For example, a movie has many actors in the cast, but each actor also has many movies she's starred in.

To model this data, we need a many-to-many relationship. Let's see how to do this by building a Rails app for a movie website.

1.
Create a new app named MovieApp.

2.
Install the gems.

3.
Run the local server and visit http://localhost:8000.

Looking at the request/response cycle, we need four parts to the build the movie app: models, controllers, routes, and views.

4.
Generate a model named Movie.

5.
Generate another model named Actor.

6.
Generate a third model named Part.

7.
In app/models/movie.rb, inside the Movie class add the following methods:

has_many :parts 
has_many :actors, through: :parts

8.
In app/models/actor.rb, add the following methods:

has_many :parts 
has_many :movies, through: :parts

9.
In app/models/part.rb, add the following methods:

belongs_to :movie 
belongs_to :actor

What did we just do? Check out the diagram in the browser:

We created three models - Movie, Actor, and Part.
In the models, we used the has_many :through association to connect the Movie model to the Actor model through the Part model.
In this way, the has_many :through association sets up a many-to-many relationship between movies and actors.

10.
Now that there's an association between Movie and Actor, let's continue and add columns to the migration files:

Open the migration file in db/migrate/ for the movies table, and add the following columns:

a string column called title
a string column called image
a string column called release_year
a string column called plot

11.
Next in the migration file for the actors table, and add the following columns:

a string column called first_name
a string column called last_name
a string column called image
a string column called bio

12.
Then in the migration file for the parts table, add the following lines. They add foreign keys that point to the movie and actor tables.

t.belongs_to :movie, index: true 
t.belongs_to :actor, index: true

13.
Run the migration to update the database with the three tables.

14.
Open up db/seeds.rb. We've added a few items here to seed the database with movies and actors. Run rake db:seed to seed the database with the data in db/seeds.rb.

Nice work! Let's review what we did:

We added columns to the movies table and actors table
We used the t.belongs_to methods in the parts table to add foreign keys, setting up the many-to-many relationship.
Finally we ran the migrations to update the database, and seeded the database with the data in db/seeds.rb.

15.
Now that the models are set up, let's move on to the rest of the request/response cycle and create the routes, controllers, and views.

Generate a controller named Movies.

16.
In the routes file, create a new route that maps the URL /movies to the Movies controller's index action.

17.
Then in the Movies controller, add the index action to display a list of all movies. To do this, fetch all movies from the database and store them in variable @movies.

18.
In app/views/movies/index.html.erb inside <div class="main"> iterate through each movie in @movies and display the image, title, and release year.

19.
Run the local server and visit http://localhost:8000/movies in the browser.

Well done! The movies show up on the page.

Let's add another action to display a specific movie and its actors. Looking at the seven standard controller actions, we need to use the show action to do this.

20.
In the routes file, add another route to send requests to URLs like /movies/1 to the Movie controller's show action. Use as: to name this route "movie".

21.
Then in the Movies controller, add the show action to display a specific movie and its actors.

First use Movie.find to find the movie by its id.
Then retrieve all actors that belong to the movie, and store them in @actors.

22.
In app/view/movies/show.html.erb

Inside <div class="movie">...</div>, display the movie's image, title, release year, and plot.
Below <h2>Cast</h2>, iterate through each actor and display the image, first name, last name, and bio.

23.
Finally in app/views/movies/index.html.erb below a movie's plot, use link_to to add a link to that movie:

Use "Learn more" for the link text
By giving the show route a name of "movie", Rails automatically creates a helper method named movie_path, so use it to generate a URL to a specific movie's path

24.
Visit http://localhost:8000/movies in the browser. Click on a 'Learn more' to see a movie and its actors.

Great job! The app displays all actors that belong to a movie. The has_many :through association lets us easily query for all actors that belong to a movie.

25.
Let's add the ability to see all movies an actor has appeared in.

Generate a controller named Actors.

26.
In the routes file, add a route that maps the URL /actors to the Actors controller's index action.

27.
Then in the controller, add the index action to display a list of all actors.

28.
In app/views/actors/index.html.erb, iterate through each actor and display the image, first name, and last name.

29.
Back in the routes file, add another route to send requests to URLs like /actors/1 to the Actors controller's show action. Use as: to name this route "actor".

30.
Then in the controller, add the show action to display a specific actor and the filmography. To do this, first find an actor by id. Then retrieve all movies that belong to the actor.

31.
In app/views/actors/show.html.erb:

Display the actor's image, first name, last name, and bio.
Then iterate through each movie and display its title, image, and release year.

32.
Finally in app/views/actors/index.html.erb below an actor's name, use link_to to add a link to that actor:

Use "Learn more" for the link text
By giving the show route a name of "actor", Rails automatically creates a helper method named actor_path, so use it to generate a URL to a specific actor's path

33.
Visit http://localhost:8000/movies in the browser. Click on a movie to see its cast.

Then visit http://localhost:8000/actors. Click on an actor to see what movies he's appeared in.

Congratulations! You build a movie website that lets people browse a movie's cast and an actor's filmography. What can we generalize so far?

Actors and movies can be modeled using a many-to-many relationship. In Rails, this can be implemented using a has_many :through association.
The has_many :through association joins two models via a third model.
