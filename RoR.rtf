	Using the request/response cycle as a guide, this has been our workflow when making a Rails app.

1) Generate a new Rails app.
2) Generate a controller and add an action.
3) Create a route that maps a URL to the controller action.
4) Create a view with HTML and CSS.
5) Run the local web server and preview the app in the browser.


1.
Let's get started by making a Rails app for a personal website. We'll explain each step in the next exercise.

$ rails new MySite

2.
Then run

$ bundle install

3.
Finally type

$ rails server

4.
View the Rails app in the browser by visiting http://localhost:8000.

Then click Next to find out what these commands do.

Nice work! In three commands, you built a working Rails app that displays the Rails default page. How does it work?

	The rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use to build the app. In the Code Editor, click on the folder icon  to see these files and folders. We'll see what these files and folders are for in the next exercises. The rails new command is the starting point of every Rails project.
	The bundle install command installed all the software packages needed by the new Rails app. These software packages are called gems and they are listed in the file Gemfile.
	The rails server command started the Rails development server so that we could preview the app in the browser by visiting http://localhost:8000. This development server is called WEBrick.

5.
Looking at the request/response cycle, we need three parts to build a Rails app: a controller, a route, and a view. Let's start here by creating a controller.

$ rails generate controller Pages

6.
After rails generate finishes running, in the Code Editor, open app/controllers/pages_controller.rb. Within the class PagesController, add a method home:

class PagesController < ApplicationController 

  def home
  end

end

7.
Now that we have a controller, let's move on to the second part of the request/response cycle and create a route.

Open config/routes.rb and underneath line 1, type:

get 'welcome' => 'pages#home'

root 'pages#home'

This route tells Rails to map requests for the url / to the Pages controller's home action.

8.
Now that we have a controller and a route, let's move on to the third part of the request/response cycle and create a view.

Open app/views/pages/home.html.erb, and type in the following HTML. Fill in your own name.

<div class="main">
  <div class="container">
    <h1>Hello my name is __</h1>
    <p>I make Rails apps.</p>
  </div>
</div>

We've provided CSS in the file app/assets/stylesheets/pages.css.scss.

9.
View your app by visiting http://localhost:8000/welcome in the browser.



Here's how a database fits into the request-response cycle. Check out the diagram in the browser.

1) When you type http://localhost:8000/welcome, the browser makes a request for the URL /welcome.
2) The request hits the Rails router.
3) The router maps the URL to a controller action to handle the request.
4) The controller action recieves the request, and asks the model to fetch data from the database.
5) The model returns data to the controller action.
6) The controller action passes the data on to the view.
7) The view renders the page as HTML.
8) The controller sends the HTML back to the browser.

Looking at the request/response cycle, we need four parts to build a Rails app - a model, a route, a controller, and a view.

1.
In the terminal, generate a new model named Message

rails generate model Message

2.
Open the migration file in db/migrate/ for the messages table. The name of the migration file starts with the timestamp of when it was created. Inside the change method, add this line as line 4:

t.text :content

3.
Then in the terminal, run

rake db:migrate

4.
Finally, run

rake db:seed

What did we just do?

	The rails generate model command created a new model named Message. In doing so, Rails created two files:

- a model file in app/models/message.rb. The model represents a table in the database.
- a migration file in db/migrate/. Migrations are a way to update the database.
	Open the migration file in db/migrate/. The migration file contains a few things:

- The change method tells Rails what change to make to the database. Here it uses the create_table method to create a new table in the database for storing messages.
- Inside create_table, we added t.text :content. This will create a text column called content in the messages tables.
- The final line t.timestamps is a Rails command that creates two more columns in the messages table called created_at and updated_at. These columns are automatically set when a message is created and updated.
	The rake db:migrate command updates the database with the new messages data model.

	Finally the rake db:seed command seeds the database with sample data from db/seeds.rb.

5.
Now that we have a model, let's move on to the second and third parts of the request/response cycle and create a controller and a route.

Generate a controller named Messages.

6.
In the routes file, create a route that maps the URL /messages to the Messages controller's index action.

7.
Then in the Messages controller (app/controllers/messages_controller.rb), add an index action:

def index 
  @messages = Message.all 
end

8.
Open app/views/messages/index.html.erb. Under line 11, type the contents as you see here:

<% @messages.each do |message| %> 
<div class="message"> 
  <p class="content"><%= message.content %></p> 
  <p class="time"><%= message.created_at %></p> 
</div> 
<% end %>

The file index.html.erb is a web template. Web templates are HTML files that contain variables and control flow statements. Rather than write the same HTML over and over again for each message, we can use web templates to loop through and display data from the database.

In this case:

<% @messages.each do |message| %> iterates through each message in @messages array. We created @messages in the Messages controller's index action.
For each message, we use <%= message.content %> and <%= message.created_at %> to display its content and the time when it was created.
The default web templating language in Rails is embedded Ruby, or ERB.

9.
So far we've been loading messages from the database and displaying them in the view. How can we create new messages and save them to the database? Looking at the seven standard Rails actions, we need to use the new and create actions. Let's set them up now.

 




In the routes file, create a route that maps requests to messages/new to the Message controller's new action.
10.
Then in the Messages controller below the index action, add the new action:

def new 
  @message = Message.new 
end

11.
In the routes file, add this route to map requests to the Message controller's create action:

post 'messages' => 'messages#create'

12.
Then in the Messages controller below the new action, add a private method named message_params. Type:

private 
  def message_params 
    params.require(:message).permit(:content) 
  end

13.
Between the new action and the private method, add the create action. Type:

def create 
  @message = Message.new(message_params) 
  if @message.save 
    redirect_to '/messages' 
  else 
    render 'new' 
  end 
end

14.
Next, in app/views/messages/new.html.erb under line 11, type in the contents as you see here:

<%= form_for(@message) do |f| %>  
  <div class="field"> 
    <%= f.label :message %><br> 
    <%= f.text_area :content %> 
  </div> 
  <div class="actions"> 
    <%= f.submit "Create" %> 
  </div> 
<% end %>

15.
Finally in app/views/messages/index.html.erb below the <% @messages.each do |message| %>...<% end %> block, add

<%= link_to 'New Message', "messages/new" %>

Nicely done! The app now takes in messages through a form and saves them into the database. How does this work? Let's use the request/response cycle as a guide to trace how a user's request flows through the app.

When you visit http://localhost:8000/messages/new to create a new message, it triggers the first turn of the request/response cycle:

1) The browser makes a HTTP GET request for the URL /messages/new.
2) The Rails router maps this URL to the Messages controller's new action. The new action creates a new Message object @message and passes it on to the view in app/views/messages/new.html.erb.
3) In the view, form_for creates a form with the fields of the @message object.
Then when you fill out the form and press Create, it triggers the second turn of the request/response cycle:

1) The browser sends the data to the Rails app via an HTTP POST request to the URL /messages.
2)This time, the Rails router maps this URL to the create action.
3) The create action uses the message_params method to safely collect data from the form and update the database.
Here we used link_to to create a link to /messages/new. Instead of hardcoding <a> elements, we can use link_to to generate links:

- the first parameter is the link text
- the second parameter is the URL

What can we generalize so far?

- A model represents a table in the database.
- A migration is a way to update the database with a new table, or changes to an existing table.
- Rails provides seven standard controller actions for doing common things such as display and create data
- Data can be displayed in the view using ERB web templating.
- Data can be saved into the database using a web form.

Confirm that your email saved to the database. The Rails console is a useful tool to interact with Rails apps. We'll use it here to query the database.

In the terminal, open a new tab by clicking the 
Switch into your app's folder by typing cd innovation-cloud
Start the Rails console by running
$ rails console
When you enter the Rails console, retrieve all emails in the database by running the query
> Signup.all
This query returns all emails in the database as an array. Your email should show up in the console output. 

To exit the Rails console at any point, type Ctrl+D.

