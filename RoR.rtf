	Using the request/response cycle as a guide, this has been our workflow when making a Rails app.

1) Generate a new Rails app.
2) Generate a controller and add an action.
3) Create a route that maps a URL to the controller action.
4) Create a view with HTML and CSS.
5) Run the local web server and preview the app in the browser.


1.
Let's get started by making a Rails app for a personal website. We'll explain each step in the next exercise.

$ rails new MySite

2.
Then run

$ bundle install

3.
Finally type

$ rails server

4.
View the Rails app in the browser by visiting http://localhost:8000.

Then click Next to find out what these commands do.

Nice work! In three commands, you built a working Rails app that displays the Rails default page. How does it work?

	The rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use to build the app. In the Code Editor, click on the folder icon  to see these files and folders. We'll see what these files and folders are for in the next exercises. The rails new command is the starting point of every Rails project.
	The bundle install command installed all the software packages needed by the new Rails app. These software packages are called gems and they are listed in the file Gemfile.
	The rails server command started the Rails development server so that we could preview the app in the browser by visiting http://localhost:8000. This development server is called WEBrick.

5.
Looking at the request/response cycle, we need three parts to build a Rails app: a controller, a route, and a view. Let's start here by creating a controller.

$ rails generate controller Pages

6.
After rails generate finishes running, in the Code Editor, open app/controllers/pages_controller.rb. Within the class PagesController, add a method home:

class PagesController < ApplicationController 

  def home
  end

end

7.
Now that we have a controller, let's move on to the second part of the request/response cycle and create a route.

Open config/routes.rb and underneath line 1, type:

get 'welcome' => 'pages#home'

root 'pages#home'

This route tells Rails to map requests for the url / to the Pages controller's home action.

8.
Now that we have a controller and a route, let's move on to the third part of the request/response cycle and create a view.

Open app/views/pages/home.html.erb, and type in the following HTML. Fill in your own name.

<div class="main">
  <div class="container">
    <h1>Hello my name is __</h1>
    <p>I make Rails apps.</p>
  </div>
</div>

We've provided CSS in the file app/assets/stylesheets/pages.css.scss.

9.
View your app by visiting http://localhost:8000/welcome in the browser.



Here's how a database fits into the request-response cycle. Check out the diagram in the browser.

1) When you type http://localhost:8000/welcome, the browser makes a request for the URL /welcome.
2) The request hits the Rails router.
3) The router maps the URL to a controller action to handle the request.
4) The controller action recieves the request, and asks the model to fetch data from the database.
5) The model returns data to the controller action.
6) The controller action passes the data on to the view.
7) The view renders the page as HTML.
8) The controller sends the HTML back to the browser.

Looking at the request/response cycle, we need four parts to build a Rails app - a model, a route, a controller, and a view.




